package bitcamp.myapp.dao.impl;

import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import bitcamp.myapp.dao.DaoException;
import bitcamp.myapp.dao.MemberDao;
import bitcamp.myapp.vo.Member;
import bitcamp.util.ConnectionFactory;

public class MemberDaoImpl implements MemberDao {

  ConnectionFactory conFactory;

  // 의존객체 Connection 을 생성자에서 받는다.
  public MemberDaoImpl(ConnectionFactory conFactory) {
    this.conFactory = conFactory;
  }

  @Override
  public void insert(Member s) {
    try (Statement stmt = conFactory.getConnection().createStatement()) {

      String sql = String.format(
          "insert into app_Member("
              + "  member_id,"
              + " name,"
              + " email,"
              + " pwd,"
              + " tel)"
              + " values('%s', '%s', '%s', sha2('%s', 256), '%s')",
              s.getNo(),
              s.getName(),
              s.getEmail(),
              s.getPassword(),
              s.getTel());
      stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);

      try (ResultSet keyRs = stmt.getGeneratedKeys()) {
        keyRs.next();

        int autoGeneratedMemberId = keyRs.getInt(1);
        s.setNo(autoGeneratedMemberId);
      }

    } catch (Exception e) {
      throw new DaoException(e);
    }
  }

  @Override
  public List<Member> findAll() {
    try (Statement stmt = conFactory.getConnection().createStatement();
        ResultSet rs = stmt.executeQuery(
            "select member_id, name, email, created_date"
                + " from app_member"
                + " order by member_id desc")) {

      ArrayList<Member> list = new ArrayList<>();
      while (rs.next()) {
        Member s = new Member();
        s.setNo(rs.getInt("member_id"));
        s.setName(rs.getString("name"));
        s.setEmail(rs.getString("email"));
        s.setCreatedDate(rs.getDate("created_date"));
        list.add(s);
      }

      return list;

    } catch (Exception e) {
      throw new DaoException(e);
    }
  }

  @Override
  public Member findByNo(int no) {
    try (Statement stmt = conFactory.getConnection().createStatement();
        ResultSet rs = stmt.executeQuery(
            "select member_id, name, email, tel, created_date"
                + " from app_member"
                + " where member_id=" + no)) {

      if (rs.next()) {
        Member s = new Member();
        s.setNo(rs.getInt("member_id"));
        s.setName(rs.getString("name"));
        s.setEmail(rs.getString("email"));
        s.setTel(rs.getString("tel"));
        s.setCreatedDate(rs.getDate("created_date"));
        return s;
      }

      return null;

    } catch (Exception e) {
      throw new DaoException(e);
    }
  }

  @Override
  public int update(Member s) {
    try (Statement stmt = conFactory.getConnection().createStatement()) {

      String sql = String.format(
          "update app_member set "
              + " name='%s', email='%s', pwd=sha2('%s',256), tel='%s'"
              + " where member_id=%d",
              s.getName(),
              s.getEmail(),
              s.getPassword(),
              s.getTel(),
              s.getNo());
      return stmt.executeUpdate(sql);

    } catch (Exception e) {
      throw new DaoException(e);
    }
  }

  @Override
  public int delete(int no) {
    try (Statement stmt = conFactory.getConnection().createStatement()) {

      String sql = String.format(
          "delete from app_member"
              + " where"
              + " member_id=%d", no);

      return stmt.executeUpdate(sql);

    } catch (Exception e) {
      throw new DaoException(e);
    }
  }

  //  public static void main(String[] args) throws Exception {
  //    Connection con = DriverManager.getConnection("jdbc:mariadb://localhost:3306/studydb", "study", "1111");
  //    MemberDaoImpl dao = new MemberDaoImpl(con);
  //
  //    Member m = new Member();
  //    m.setName("test5");
  //    m.setEmail("numberfive@test.com");
  //    m.setPassword("1");
  //    m.setTel("55555");
  //    dao.insert(m);
  //    System.out.println(m);


  //    List<Member> list = dao.findAll();
  //    for (Member m :list) {
  //      System.out.println(m);
  //    }


  //    Member m = dao.findByNo(28);
  //    System.out.println(m);


  //    Member m = new Member();
  //    m.setNo(28);
  //    m.setName("test11");
  //    m.setEmail("numbereleven@test.com");
  //    m.setPassword("1");
  //    m.setTel("1111");
  //    System.out.println(dao.update(m));


  //    System.out.println(dao.delete(29));
  //}
}























